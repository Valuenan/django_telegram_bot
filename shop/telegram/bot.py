import logging
import re

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, InputMediaPhoto, \
    KeyboardButton, error, bot
from telegram.ext import Updater, CallbackContext, CommandHandler, MessageHandler, Filters, CallbackQueryHandler, \
    PollAnswerHandler

from shop.telegram.db_connection import load_last_order, get_category, get_products, \
    save_order, get_user_orders, edit_to_cart, show_cart, db_delete_cart, get_product_id, start_user, \
    old_cart_message, save_cart_message_id, old_cart_message_to_none, check_user_is_staff, get_waiting_orders, \
    get_user_id_chat, status_confirmed_order, save_delivery_settings, get_delivery_settings, get_user_address, \
    get_shops, user_add_phone, ADMIN_TG
from shop.telegram.settings import TOKEN, ORDERS_CHAT_ID
from users.models import ORDER_STATUS
from django_telegram_bot.settings import BASE_DIR

updater = Updater(token=TOKEN)

dispatcher = updater.dispatcher

BUTTONS_IN_ROW_CATEGORY = 2
users_message = {}

""" –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô """


def main_keyboard(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–∞–Ω—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É"""
    user = update.message.from_user
    text, err = start_user(user.first_name, user.last_name, user.username,
                           update.message.chat_id, cart_message_id=0, discount=1)

    if err == 'ok':
        button_column = [[KeyboardButton(text='–ö–∞—Ç–∞–ª–æ–≥ üßæ'), KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí')],
                         [KeyboardButton(text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã üóÉÔ∏è')]]
        check = check_user_is_staff(update.message.chat_id)
        if check is not None and check[0]:
            button_column.append([KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'), KeyboardButton(text='–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑')])
        main_kb = ReplyKeyboardMarkup([button for button in button_column], resize_keyboard=True)
    elif err == 'no-phone':
        users_message[user.id] = ''
        main_kb = ReplyKeyboardMarkup([[KeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû')]], resize_keyboard=True)

    message = context.bot.send_message(chat_id=update.effective_chat.id, text=text,
                                       reply_markup=main_kb)
    context.bot.delete_message(chat_id=update.effective_chat.id,
                               message_id=message.message_id - 1)


start_handler = CommandHandler('start', main_keyboard)
dispatcher.add_handler(start_handler)


def phone_check(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–∞–Ω—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–Ω–∏–∑—É"""
    user = update.message.from_user

    if user.id not in users_message or users_message[user.id] == '':
        main_keyboard(update, context)
    else:
        number = users_message[user.id]
        result = re.match(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$',
                          number)
        if bool(result):
            user_add_phone(user.id, number)
            main_keyboard(update, context)
            del users_message[user.id]
        else:
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–æ–º–µ—Ä {number}, –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É {ADMIN_TG} (r1)")


phone_check_handler = MessageHandler(Filters.text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû'), phone_check)
dispatcher.add_handler(phone_check_handler)


def catalog(update: Update, context: CallbackContext):
    """–í—ã–∑–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º"""

    buttons = [[]]
    row = 0

    if update.callback_query:
        call = update.callback_query
        context.bot.delete_message(chat_id=call.message.chat.id,
                                   message_id=call.message.message_id)
        chosen_category = call.data.split('_')

        categories = get_category(int(chosen_category[1]))

    else:
        categories = get_category()
    if categories:
        for index, category in enumerate(categories):
            button = (InlineKeyboardButton(text=category[1], callback_data=f'category_{category[0]}_{category[1]}'))
            if index % BUTTONS_IN_ROW_CATEGORY == 0:
                buttons.append([])
                row += 1
            buttons[row].append(button)
        keyboard = InlineKeyboardMarkup([button for button in buttons])

        if update.callback_query:
            context.bot.send_message(chat_id=update.effective_chat.id, text=f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {chosen_category[2]}',
                                     reply_markup=keyboard)
        else:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ö–∞—Ç–∞–ª–æ–≥',
                                               reply_markup=keyboard)
            context.bot.delete_message(chat_id=update.effective_chat.id,
                                       message_id=message.message_id - 1)
    else:
        products_catalog(update, context, chosen_category[1])


menu_handler = MessageHandler(Filters.text('–ö–∞—Ç–∞–ª–æ–≥ üßæ'), catalog)
dispatcher.add_handler(menu_handler)

catalog_handler = CallbackQueryHandler(catalog, pattern="^" + str('category_'))
dispatcher.add_handler(catalog_handler)


def products_catalog(update: Update, context: CallbackContext, chosen_category=False):
    """–í—ã–∑–æ–≤ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤"""
    page = 0
    pagination = False
    if '#' in str(update.callback_query.data) and not chosen_category:
        chosen_category = update.callback_query.data.split('_')[1]
        chosen_category, page = chosen_category.split('#')
        page = int(page)
    products, pages = get_products(int(chosen_category), page)
    if pages:
        pagination = True
    if products:
        for product in products:
            product_id, product_name, product_img, price, category_id, rests = product
            buttons = ([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å  üü¢', callback_data=f'add_{product_id}'),
                        InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å üî¥', callback_data=f'remove_{product_id}')],)
            imgs = [product_img]
            try:
                img_reversed = product_img.replace('.', '@rev.')
                open(f'{BASE_DIR}/static/products/{img_reversed}')
                imgs.append(f'{img_reversed}')
            except FileNotFoundError:
                pass

            if len(imgs) > 1:
                compounds_url = f'{BASE_DIR}/static/products/{imgs[1]}'
                buttons[0].append(InlineKeyboardButton(text='–°–æ—Å—Ç–∞–≤', callback_data=f'roll_{compounds_url}'))
            keyboard = InlineKeyboardMarkup([button for button in buttons])
            context.bot.send_message(chat_id=update.effective_chat.id, text=f'{product_name} '
                                                                            f'\n <b>–¶–µ–Ω–∞: {price}</b>'
                                                                            f'\n <i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rests} —à—Ç.</i>',
                                     parse_mode='HTML')
            try:
                product_photo = open(f'{BASE_DIR}/static/products/{imgs[0]}', 'rb')
            except FileNotFoundError:
                product_photo = open(f'{BASE_DIR}/static/products/no-image.jpg', 'rb')
            context.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo=product_photo,
                                   disable_notification=True,
                                   reply_markup=keyboard)
        if pagination and page != pages:
            keyboard_next = InlineKeyboardMarkup(
                [[InlineKeyboardButton(text='–ï—â–µ —Ç–æ–≤–∞—Ä—ã', callback_data=f'product_{chosen_category}#{page + 1}')]])
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ <b>{page + 1}</b> –∏–∑ {pages + 1}',
                                     disable_notification=True,
                                     reply_markup=keyboard_next, parse_mode='HTML')

    else:
        context.bot.send_message(chat_id=update.effective_chat.id, text=f'–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ–Ω–∞—à–ª–æ—Å—å —Ç–æ–≤–∞—Ä–æ–≤ üò®')


catalog_handler = CallbackQueryHandler(products_catalog, pattern="^" + str('product_'))
dispatcher.add_handler(catalog_handler)


def roll_photo(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ—Å—Ç–∞–≤–æ–º –∏ –æ–±—Ä–∞—Ç–Ω–æ"""
    call = update.callback_query

    photo_url = call.data.split('_')[1]
    turn_photo = open(photo_url, 'rb')

    main_inline_kb = call.message.reply_markup.inline_keyboard

    if '@rev' in photo_url:
        main_photo = photo_url.replace('@rev', '')
    else:
        main_photo = photo_url.replace('.', '@rev.')

    buttons = ([[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å  üü¢', callback_data=main_inline_kb[0][0]['callback_data']),
                 InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å üî¥', callback_data=main_inline_kb[0][1]['callback_data']),
                 InlineKeyboardButton(text='–ü–æ–≤–µ—Ä–Ω—É—Ç—å', callback_data=f'roll_{main_photo}')]])
    keyboard = InlineKeyboardMarkup([button for button in buttons])
    try:
        context.bot.edit_message_media(
            media=InputMediaPhoto(media=turn_photo),
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=keyboard)
    except:
        context.bot.send_message(call.message.chat.id, "–•–º... —Å–æ—Å—Ç–∞–≤–∞ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å")


roll_photo_handler = CallbackQueryHandler(roll_photo, pattern="^" + str('roll_'))
dispatcher.add_handler(roll_photo_handler)


def edit(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–∏—Ç—å/–£–¥–∞–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ"""

    call = update.callback_query
    user = call.from_user.id
    command, product_id = call.data.split('_')

    product_amount, product = edit_to_cart(command, user, product_id)
    context.bot.answer_callback_query(callback_query_id=call.id,
                                      text=f'–í –∫–æ—Ä–∑–∏–Ω–µ {product[0]} - {int(product_amount)} —à—Ç.')


catalog_handler = CallbackQueryHandler(edit, pattern="^" + str('add_'))
dispatcher.add_handler(catalog_handler)

catalog_handler = CallbackQueryHandler(edit, pattern="^" + str('remove_'))
dispatcher.add_handler(catalog_handler)


def cart(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è/ –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã"""
    if update.callback_query:
        call = update.callback_query
        chat_id = call.from_user.id
        if 'return-to-cart_' in call.data:
            messages = call.data.split('_')[1]
            messages = messages.split('-')[0:-1]
            for message_id in messages:
                context.bot.delete_message(chat_id=call.message.chat_id,
                                           message_id=int(message_id))

    else:
        chat_id = update.message.chat_id
        old_cart_message_id = old_cart_message(chat_id)
        try:
            if old_cart_message_id != 0:
                context.bot.delete_message(chat_id=chat_id, message_id=old_cart_message_id)
        except error.BadRequest:
            pass
    cart_info = show_cart(chat_id)
    cart_price = 0

    cart_message = ''
    if len(cart_info) > 0:
        for num, product in enumerate(cart_info):
            product_name, amount, price = product
            cart_price += round(price * amount, 2)
            cart_message += f'{num + 1}. {product_name} - {int(amount)} —à—Ç. –ø–æ {price} —Ä.\n'
        else:
            cart_message += f'–ò—Ç–æ–≥–æ: {cart_price} —Ä.'

        buttons = ([InlineKeyboardButton(text='–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üìù', callback_data='offer-stage_1_none')],
                   [InlineKeyboardButton(text='–û—á–∏—Å—Ç–∏—Ç—å üóëÔ∏è', callback_data='delete-cart'),
                    InlineKeyboardButton(text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üìã', callback_data='correct-cart')])

        keyboard = InlineKeyboardMarkup([button for button in buttons])

        if update.callback_query:
            chat_id = update.callback_query.message.chat_id
            message_id = update.callback_query.message.message_id
            try:
                message = context.bot.edit_message_text(chat_id=chat_id,
                                                        message_id=message_id,
                                                        text=cart_message,
                                                        reply_markup=keyboard)
            except error.BadRequest:
                pass
            else:
                old_cart_message_to_none(chat_id)


        else:
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text=cart_message,
                                               reply_markup=keyboard)
            context.bot.delete_message(chat_id=update.effective_chat.id,
                                       message_id=message.message_id - 1)

    else:

        message = context.bot.send_message(chat_id=update.effective_chat.id,
                                           text='–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è')

        context.bot.delete_message(chat_id=update.effective_chat.id,
                                   message_id=message.message_id - 1)
    try:
        save_cart_message_id(message.chat_id, message.message_id)
    except ReferenceError:
        pass


cart_handler = MessageHandler(Filters.text('–ö–æ—Ä–∑–∏–Ω–∞ üõí'), cart)
dispatcher.add_handler(cart_handler)

cancel_cart_handler = CallbackQueryHandler(cart, pattern=str('cancel-delete-cart'))
dispatcher.add_handler(cancel_cart_handler)

return_cart_handler = CallbackQueryHandler(cart, pattern="^" + str('return-to-cart_'))
dispatcher.add_handler(return_cart_handler)


def get_offer_settings(update: Update, context: CallbackContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–∫–∞–∑–∞ (–¥–æ—Å—Ç–∞–≤–∫–∞, –≤–∏–¥ –æ–ø–ª–∞—Ç—ã, –º–∞–≥–∞–∑–∏–Ω)"""
    global users_message
    call = update.callback_query
    chat_id = update.effective_chat.id
    message_id = call.message.message_id
    _, settings_stage, answer = call.data.split('_')

    if settings_stage == '1':
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–î–∞', callback_data='offer-stage_2_yes'),
                                          InlineKeyboardButton(text='–ù–µ—Ç', callback_data='offer-stage_2_no')]])
        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=f'–í–∞–º –¥–æ—Å—Ç–∞–≤–∏—Ç—å? üöö',
                                      reply_markup=keyboard)
    if settings_stage == '2' and answer == 'yes':
        save_delivery_settings(value=True, field='delivery', chat_id=chat_id)
        users_message[chat_id] = ''
        street = get_user_address(chat_id)
        buttons = [[InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å üìù', callback_data='offer-stage_3_none')]]
        if street:
            buttons.insert(0, [InlineKeyboardButton(text=street, callback_data=f'offer-stage_3_street')])
        keyboard = InlineKeyboardMarkup(buttons)
        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥—Ä–µ—Å–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ —ç—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å"'
                                           f' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                                      reply_markup=keyboard)
    if settings_stage == '2' and answer == 'no':
        save_delivery_settings(value=False, field='delivery', chat_id=chat_id)
        buttons = []
        for shop in get_shops():
            shop_id, shop_name = shop
            buttons.append(InlineKeyboardButton(text=shop_name, callback_data=f'offer-stage_4_{shop_id}'))
        keyboard = InlineKeyboardMarkup([buttons])
        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω',
                                      reply_markup=keyboard)
    if settings_stage == '3':
        if answer == "none":
            save_delivery_settings(value=users_message[chat_id], field='delivery_street', chat_id=chat_id)
        save_delivery_settings(value=True, field='delivery', chat_id=chat_id)
        users_message.pop(chat_id)
        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='üéüÔ∏è –ù–∞–ª–∏—á–Ω—ã–º–∏', callback_data='offer-stage_4_cash'),
              InlineKeyboardButton(text='üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω–æ',
                                   callback_data='offer-stage_4_cashless')]])
        context.bot.edit_message_text(chat_id=update.effective_chat.id,
                                      message_id=message_id,
                                      text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –æ–ø–ª–∞—Ç—ã',
                                      reply_markup=keyboard)

    if settings_stage == '4':
        try:
            answer = int(answer)
            save_delivery_settings(value=answer, field='main_shop_id', chat_id=chat_id)
        except ValueError:
            if answer == 'cashless':
                save_delivery_settings(value=False, field='payment_cash', chat_id=chat_id)
            elif answer == 'cash':
                save_delivery_settings(value=True, field='payment_cash', chat_id=chat_id)
        delivery_settings = _user_settings_from_db(get_delivery_settings(chat_id))

        cart_price = 0
        cart_info = show_cart(chat_id)

        for num, product in enumerate(cart_info):
            product_name, amount, price = product
            cart_price += price * amount

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–ó–∞–∫–∞–∑–∞—Ç—å üõç', callback_data=f'order_{cart_price}')],
             [InlineKeyboardButton(text='–†–µ–¥–∫—Ç–∏—Ä–æ–≤–∞—Ç—å üìù',
                                   callback_data=f'offer-stage_1_none')]])

        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=f'–ú—ã –¥–æ—Å—Ç–∞–≤–∏–º –ø–æ –∞–¥—Ä–µ—Å—É - {delivery_settings}',
                                      reply_markup=keyboard)


offer_settings = CallbackQueryHandler(get_offer_settings, pattern=str('offer-stage'))
dispatcher.add_handler(offer_settings)


def _user_settings_from_db(data: tuple) -> str:
    """ –ù–∞—Å—Ç—Ä–æ–∫–∏ –∑–∞–∫–∞–∑–∞ """
    delivery, main_shop_id, payment_cash, delivery_street = data
    text = ''
    if delivery:
        if payment_cash == 'True':
            text = f'–ø–æ –∞–¥—Ä–µ—Å—É {delivery_street}, –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏'
        else:
            text = f'–ø–æ –∞–¥—Ä–µ—Å—É {delivery_street}, –æ–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ'
    else:
        if main_shop_id == 2:
            text = '–≤ –º–∞–≥–∞–∑–∏–Ω –ø–µ—Ä. –ü—Ä–∞—á–µ—á–Ω—ã–π 3 '
        if main_shop_id == 1:
            text = '–≤ –º–∞–≥–∞–∑–∏–Ω —É–ª. –ö–∏–µ–≤—Å–∫–∞—è 3'
    return text


def edit_cart(update: Update, context: CallbackContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    call = update.callback_query
    chat_id = call.message.chat_id
    message_id = call.message.message_id
    command, product_id = call.data.split('_')
    amount, product = edit_to_cart(command, chat_id, product_id)
    message = f'{product[0]} - {int(amount)} —à—Ç.'
    if amount > 0:
        buttons = ([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å  üü¢', callback_data=f'add-cart_{product_id}'),
                    InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å üî¥', callback_data=f'remove-cart_{product_id}')],)
        keyboard_edit = InlineKeyboardMarkup([button for button in buttons])
        try:
            context.bot.edit_message_text(chat_id=chat_id,
                                          message_id=message_id,
                                          text=message,
                                          reply_markup=keyboard_edit)
        except error.BadRequest:
            pass
    else:
        keyboard_edit = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å  üü¢', callback_data=f'add-cart_{product_id}')]])
        context.bot.edit_message_text(chat_id=chat_id,
                                      message_id=message_id,
                                      text=message,
                                      reply_markup=keyboard_edit)


edit_cart_handler = CallbackQueryHandler(edit_cart, pattern="^" + str('add-cart_'))
dispatcher.add_handler(edit_cart_handler)

catalog_handler = CallbackQueryHandler(edit_cart, pattern="^" + str('remove-cart_'))
dispatcher.add_handler(catalog_handler)


def start_edit(update: Update, context: CallbackContext):
    """–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    messages_ids = ''
    chat_id = update.callback_query.message.chat_id
    cart_info = show_cart(chat_id)
    message_id = update.callback_query.message.message_id
    context.bot.delete_message(chat_id=chat_id,
                               message_id=message_id)
    if len(cart_info) > 0:
        for product in cart_info:
            product_name, amount, price = product
            product_id = get_product_id(product_name)[0]
            buttons = ([InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å  üü¢', callback_data=f'add-cart_{product_id}'),
                        InlineKeyboardButton(text='–£–±—Ä–∞—Ç—å üî¥', callback_data=f'remove-cart_{product_id}')],)
            keyboard_edit = InlineKeyboardMarkup([button for button in buttons])
            message = f'{product_name} - {int(amount)} —à—Ç. –ø–æ {price} —Ä.\n'
            message = context.bot.send_message(chat_id=chat_id,
                                               text=message,
                                               reply_markup=keyboard_edit)
            messages_ids += f'{message.message_id}-'

        keyboard = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å', callback_data=f'return-to-cart_{messages_ids}')]])

        context.bot.send_message(chat_id=chat_id,
                                 text=f'–î–ª—è –ø–æ—Å—á–µ—Ç–∞ —Å—É–º–º—ã –Ω–∞–∂–º–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å',
                                 reply_markup=keyboard)


cart_list_handler = CallbackQueryHandler(start_edit, pattern=str('correct-cart'))
dispatcher.add_handler(cart_list_handler)


def order(update: Update, context: CallbackContext):
    """–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É (–ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤)"""
    call = update.callback_query
    chat_id = call.message.chat_id
    user = call.message.chat.username
    order_num = load_last_order()
    command, cart_price = call.data.split('_')
    order_products, order_price = save_order(chat_id, call.message.text, cart_price)
    text_products = ''
    for product_name, product_amount in order_products:
        text_products += f'\n{product_name[0]} - {int(product_amount)} —à—Ç.'
    order_message = f'<b><u>–ó–∞–∫–∞–∑ ‚Ññ: {order_num}</u></b> \n {text_products} \n {call.message.text} \n <b>–Ω–∞ —Å—É–º–º—É: {order_price}</b>'
    context.bot.answer_callback_query(callback_query_id=call.id,
                                      text=f'–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç')
    context.bot.edit_message_text(text=f'–ö–ª–∏–µ–Ω—Ç: {user} \n{order_message}',
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, parse_mode='HTML')
    context.bot.forward_message(chat_id=ORDERS_CHAT_ID,
                                from_chat_id=call.message.chat_id,
                                message_id=call.message.message_id, parse_mode='HTML')
    context.bot.edit_message_text(text=f'–í–∞—à {order_message}',
                                  chat_id=call.message.chat.id,
                                  message_id=call.message.message_id, parse_mode='HTML')


order_cart_handler = CallbackQueryHandler(order, pattern=str('order_'))
dispatcher.add_handler(order_cart_handler)


def delete_cart(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    call = update.callback_query

    buttons = ([InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è ‚ùå', callback_data='cancel-delete-cart'),
                InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å ‚úîÔ∏è', callback_data='accept-delete-cart')],)

    keyboard = InlineKeyboardMarkup([button for button in buttons])

    message = context.bot.edit_message_text(chat_id=call.message.chat.id,
                                            message_id=call.message.message_id,
                                            text='‚ö†Ô∏è–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É ‚ö†Ô∏è',
                                            reply_markup=keyboard)
    save_cart_message_id(message.chat_id, message.message_id)


delete_cart_handler = CallbackQueryHandler(delete_cart, pattern=str('delete-cart'))
dispatcher.add_handler(delete_cart_handler)


def accept_delete_cart(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""

    call = update.callback_query
    chat_id = call.message.chat_id
    db_delete_cart(chat_id)
    context.bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)
    context.bot.answer_callback_query(callback_query_id=call.id, text=f'–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞')


accept_cart_handler = CallbackQueryHandler(accept_delete_cart, pattern=str('accept-delete-cart'))
dispatcher.add_handler(accept_cart_handler)


def orders_history(update: Update, context: CallbackContext):
    """–í—ã–∑–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ (–≤ —Å—Ç–∞—Ç—É—Å–µ –∫—Ä–æ–º–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–Ω–æ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ)"""
    chat_id = update.effective_chat.id

    orders = get_user_orders(chat_id, 'AND orders.status_id NOT IN (5,6)')
    orders.sort()

    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='remove-message')]])

    if not orders:
        message = context.bot.send_message(chat_id=chat_id,
                                           text='–í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫—É–ø–∞–ª–∏ :(',
                                           reply_markup=keyboard)
    else:
        prev_id, prev_sum = None, None
        text = ''
        len_orders = len(orders) - 1
        for index, order in enumerate(orders):

            order_id, product_name, product_price, product_amount, order_sum, order_status = order
            if not prev_id:
                position = 1
                prev_id, prev_sum = order_id, order_sum
                order_products = [f'<i>{position}.</i> {product_name} - {int(product_amount)} —à—Ç. –ø–æ {product_price}—Ä.']
            elif prev_id == order_id:
                order_products.append(
                    f'<i>{position}.</i> {product_name} - {int(product_amount)} —à—Ç. –ø–æ {product_price}—Ä.')
            if prev_id != order_id:
                position = 1
                text_products = '\n'.join(order_products)
                text += f'''<b><u>–ó–∞–∫–∞–∑ ‚Ññ {prev_id}</u></b>\n <u>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {ORDER_STATUS[int(order_status)][1]}</u> \n {text_products} \n <b>–Ω–∞ —Å—É–º–º—É:{prev_sum}</b> \n {"_" * 20} \n'''
                order_products = [f'<i>{position}.</i> {product_name} - {int(product_amount)} —à—Ç. –ø–æ {product_price}—Ä.']
                prev_id, prev_sum = order_id, order_sum
            position += 1
            if index == len_orders:
                text_products = '\n'.join(order_products)
                text += f'''<b><u>–ó–∞–∫–∞–∑ ‚Ññ {order_id}</u></b> \n <u>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {ORDER_STATUS[int(order_status)][1]}</u> \n {text_products} \n <b>–Ω–∞ —Å—É–º–º—É: {order_sum}</b> \n {"_" * 20} \n'''
                break
        if update.callback_query:
            context.bot.edit_message_text(chat_id=chat_id,
                                          text=text,
                                          reply_markup=keyboard, parse_mode='HTML',
                                          message_id=update.callback_query.message.message_id, )
        else:
            message = context.bot.send_message(chat_id=chat_id,
                                               text=text,
                                               reply_markup=keyboard, parse_mode='HTML')
    if not update.callback_query:
        context.bot.delete_message(chat_id=chat_id,
                                   message_id=message.message_id - 1)


orders_history_handler = MessageHandler(Filters.text('–ú–æ–∏ –∑–∞–∫–∞–∑—ã üóÉÔ∏è'), orders_history)
dispatcher.add_handler(orders_history_handler)

accept_cart_handler = CallbackQueryHandler(accept_delete_cart, pattern=str('history_orders'))
dispatcher.add_handler(accept_cart_handler)


def unknown(update: Update, context: CallbackContext):
    """–ù–µ–∏–∑–≤–µ—Ç—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    context.bot.send_message(chat_id=update.effective_chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã")


unknown_handler = MessageHandler(Filters.command, unknown)
dispatcher.add_handler(unknown_handler)

""" –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï """


def poll_orders(update: Update, context: CallbackContext):
    """–í—ã–≤–æ–¥–∏—Ç –æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑–∞–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/ –æ—Ç–º–µ–Ω—ã"""
    if check_user_is_staff(update.message.chat_id)[0]:
        if update.message.text == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑':
            poll_type = 'approve'
        elif update.message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑':
            poll_type = 'refuse'
        user = update.message.from_user.username
        orders = get_waiting_orders()
        # –Ω–µ –±–æ–ª–µ–µ 10 –≤–∞—Ä–∏–∞–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞ –≤ –æ–ø—Ä–æ—Å–µ
        options_list = []
        options = [('–û—Ç–º–µ–Ω–∞')]
        for index, order in enumerate(orders):
            if (index + 1) % 10 == 0:
                options_list.append(options)
                options = [('–û—Ç–º–µ–Ω–∞')]
            options.append(f'–û—Ä–¥–µ—Ä ‚Ññ{order[0]} - –∫–ª–∏–µ–Ω—Ç {order[1]} - —Å—Ç–æ–∏–º–æ—Å—Ç—å {order[2]}—Ä.')
        if len(options) > 1:
            options_list.append(options)

        for options in options_list:
            message = context.bot.send_poll(chat_id=update.effective_chat.id,
                                            question=f'–û–ø—Ä–æ—Å {update.message.text} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user}',
                                            options=options,
                                            is_anonymous=False,
                                            allows_multiple_answers=True)
        if not options_list:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='remove-message')]])
            message = context.bot.send_message(chat_id=update.effective_chat.id,
                                               text='–ù–µ—Ç –∑–∞—è–≤–æ–∫',
                                               reply_markup=keyboard)
            context.bot.delete_message(chat_id=update.effective_chat.id,
                                       message_id=message.message_id - 1)
            return
        poll = {
            message.poll.id: {
                "admin_username": user,
                "orders": orders,
                "message_id": message.message_id,
                "chat_id": update.effective_chat.id,
                "poll_type": poll_type
            }
        }
        context.bot_data.update(poll)
    else:
        context.bot.send_message(chat_id=update.effective_chat.id,
                                 text='–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')


poll_orders_handler = MessageHandler(Filters.text('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'), poll_orders)
dispatcher.add_handler(poll_orders_handler)

poll_orders_handler = MessageHandler(Filters.text('–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑'), poll_orders)
dispatcher.add_handler(poll_orders_handler)


def poll_orders_answer(update: Update, context: CallbackContext):
    """–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å –ø–æ –∑–∞–∫–∞–∑–∞–º"""
    print(context)
    answer = update.poll_answer
    poll_id = answer.poll_id

    try:
        orders = context.bot_data[poll_id]["orders"]
        admin_username = context.bot_data[poll_id]['admin_username']
    except KeyError:
        context.bot.send_message(chat_id=update.poll_answer.user.id,
                                 text=f'–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—à–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
                                      f'–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @Vesselii')

        return
    selected_options = answer.option_ids

    if 0 in selected_options:
        return

    for order_index in selected_options:
        confirm_order = orders[order_index - 1]
        chat_id = get_user_id_chat(confirm_order[1])
        if context.bot_data[poll_id]['poll_type'] == 'approve':
            status_confirmed_order(order_id=confirm_order[0], admin_username=admin_username, status=5)
        if context.bot_data[poll_id]['poll_type'] == 'refuse':
            context.bot.send_message(chat_id=chat_id,
                                     text=f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{confirm_order[0]} –æ—Ç–º–µ–Ω–µ–Ω')
            status_confirmed_order(order_id=confirm_order[0], admin_username=admin_username, status=6)


poll_answer_handler = PollAnswerHandler(poll_orders_answer)
dispatcher.add_handler(poll_answer_handler)


def ready_order_message(context: CallbackContext, chat_id, order_id, order_sum):
    """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"""
    context.bot.send_message(chat_id=chat_id,
                             text=f'–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –Ω–∞ —Å—É–º–º—É {order_sum} –æ–∂–∏–¥–∞–µ—Ç –≤–∞—Å –≤ –º–∞–≥–∞–∑–∏–Ω–µ')


""" –£—Ç–∏–ª–∏—Ç—ã """


def user_message(update: Update, context: CallbackContext):
    """–ü—Ä–∏–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥—Ä–µ—Å)"""
    global users_message
    chat_id = update.message.chat_id
    if chat_id in users_message:
        users_message[chat_id] = update.message.text
    else:
        pass


get_user_message = MessageHandler(Filters.text, user_message)
dispatcher.add_handler(get_user_message)


def remove_bot_message(update: Update, context: CallbackContext):
    """–ó–∞–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    call = update.callback_query
    context.bot.delete_message(chat_id=call.message.chat.id,
                               message_id=call.message.message_id)


remove_message = CallbackQueryHandler(remove_bot_message, pattern=str('remove-message'))
dispatcher.add_handler(remove_message)

if __name__ == '__main__':
    updater.start_polling()
